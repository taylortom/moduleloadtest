const DataValidationError = require('./datavalidationerror');
const DependencyLoader = require('./dependencyloader');
const AbstractModule = require('./abstractmodule');
const path = require('path');
const Utils = require('./utils');

let instance;
/** @ignore */ let initialising = false;
/**
* The main application class
*/
class App extends AbstractModule {
  /**
  * Returns the singleton instance, or initialises it if there isn't one
  * @return {App} The instance
  */
  static get instance() {
    if(initialising) {
      return; // don't initialise if we're already initialising
    }
    if(!instance) {
      initialising = true;
      instance = new App();
      initialising = false;
    }
    return instance;
  }
  /**
  * Create the application instance
  */
  constructor() {
    const pkg = require(path.join(process.cwd(), 'package.json'));
    super(null, { ...pkg, name: 'app', dir: path.join(__dirname, '..') });
    /**
    * Must have the App reference for parent class, and can't pass 'this' to the
    * super constructor because it doesn't exist yet
    */
    this.app = this;
    /**
    * Reference to the DependencyLoader instance
    * @type {DependencyLoader}
    */
    this.dependencyloader = new DependencyLoader(this);
    /**
    * Module for handling system configuration storage
    * @type {AbstractConfig}
    */
    this.config = {};
    /**
    * Module for translating strings
    * @type {AbstractLang}
    */
    this.lang = {};
    /**
    * Module for logging messages
    * @type {AbstractLogger}
    */
    this.logger = {};
  }
  /**
  * The module dependencies
  * @return {Object}
  */
  get dependencies() {
    return this.dependencyloader.dependencies;
  }
  /**
  * Retrieves a loaded module by name (shortcut for {@link DependencyLoader#getModule})
  * @param {String} name
  * @return {AbstractModule} module instance
  */
  getModule(name) {
    return this.dependencyloader.getModule(name);
  }
  /** @override */
  getConfig(key) {
    return this.app.config.get(`adapt-authoring-core.${key}`);
  }
  /**
  * Starts the app
  */
  async start() {
    return new Promise(async (resolve, reject) => {
      try {
        this.dependencyloader.load();
        await this.dependencyloader.waitFor('lang', 'logger');
        this.log('success', this.lang.t('info.startapp', { dir: this.getConfig('root_dir') }));
      } catch(e) {
        this.log('error', e);
        e.data.errors.forEach(e2 => console.log(e2));
      }
    });
  }
}

module.exports = App;
